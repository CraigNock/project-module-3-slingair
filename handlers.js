const {seats} = require('./test-data/flightSeating');
const {reservations} = require('./test-data/reservations');
const request = require('request-promise');

//gets list of flights
const dbPullFlights = async () => {
    try {
        let flightList = await request('https://journeyedu.herokuapp.com/slingair/flights');
        flightList = JSON.parse(flightList);
        flightList = flightList.flights;
        // console.log(flightList);

        return flightList;
    } catch(err) {console.log(err)};
}
//gives flights to page
const flightListHandle = async (req, res) => {
    // let flights = Object.keys(seats);
    let flights = await dbPullFlights();
    res.send({flights: flights})
};

//checks if flight exists, returns flight info (seat availability)
const dbCheckSeats = async (flightNum) => {
    try {
        let seatList = await request(`https://journeyedu.herokuapp.com/slingair/flights/${flightNum}`);
        seatList = JSON.parse(seatList);
        seatList = seatList[`${flightNum}`];
        return seatList;
    } catch(err) {console.log(err)};
}
const seatCheckHandle = async (req, res) => {
    let flight = req.params.flight.toUpperCase();
    // console.log(seats[flight]);
    let seatList = await dbCheckSeats(flight);
    if (seatList !== undefined){
        res.status(200).send({
        status: '200',
        seatList: seatList
    });
    } else {
        console.log('flight not found');
        res.send({data: 'flight not found'});
    }
    
};

//move user data/reservation to reservations and make seat unavailable in seats
const dbUserData = async (newRes) => {
    try{
        const info = {
            method: 'POST',
            uri: 'https://journeyedu.herokuapp.com/slingair/users',
            body: newRes,
            headers: {
                "Content-Type": "application/json",
                "Accept" : "application/json"
            },
            json: true
        }
        let dbRes = await request(info);
        // console.log(dbRes);
        return dbRes.reservation;
    } catch(err) {console.log(err)};
};

const confirmedHandle = async (req, res) => {
    try {
        let newUser = req.body;
        let userRes = await dbUserData(newUser);
        // console.log('userres '+ userRes);
        res.status(200).send({
            status: '200',
            userRes: userRes
        })
    } catch(err) {console.log(err)};

    // let flight = newUser.flight;
    // newUser.id = '1111'; //randomise or generated by server?
    // reservations.push(newUser);
    // let seat = newUser.seat;
    // seats[`${flight}`].forEach(chair => {
    //     if (chair.id === `${seat}`){
    //         chair.isAvailable = false;
    //     }
    // })
};

//confirmation/check reservation page, pulling user/reservation info
const reservationHandle = async (req, res) => {
    try{
        let resId = req.body;
        // console.log(resId.resId);
        resId = resId.resId
        let userData = await request(`https://journeyedu.herokuapp.com/slingair/users/${resId}`);
        userData = JSON.parse(userData);
        // console.log(userData);
        userData = userData.data;
        // console.log(userData);
        res.status(200).send({
        status: '200',
        userData: userData
        })
        
    } catch(err) {
        res.status(400).send({
            status: '400'
        })
    };
    
};

const passengerHandle = async (req, res) => {
    console.log('beef');
    flightNum = req.params.flight;
    let i = 0;
    let userArray = [];
    userPull = [1];
    while (userPull.length) {
        userPull = await request(`https://journeyedu.herokuapp.com/slingair/users?limit=25&start=${i}`);
        userPull = JSON.parse(userPull);
        userArray = userArray.concat(userPull);
        i = i + 25;
    };
    console.log(userArray.length);
    res.send({
        userArray: userArray
    });
};


module.exports = {seatCheckHandle, confirmedHandle, flightListHandle, reservationHandle, passengerHandle};